:maruku
  # Features

  * ToC
  {:toc}

  ## Use what you want

  Because of Ramaze's modular design, you are free to use your favourite technologies and tools.

  ## ORMs

  * Sequel
  * Data Mapper
  * Active Record
  * M4DBI

  ## Templating Engines

  * Amrita2
  * Erubis
  * Tenjin
  * Haml
  * Sass
  * Liquid
  * Markaby
  * Remarkably
  * Ezamar
  * Nagoro
  * XSLT

  ## Adapters

  * Mongrel
  * Evented Mongrel
  * Swiftiplied Mongrel
  * WEBrick
  * FCGI
  * CGI
  * SCGI
  * LiteSpeed
  * Thin
  * Ebb

  ## Javascript Libraries

  * jQuery
  * Prototype
  * Mootools
  * YUI
  * Dojo

  ## Loggers

  * LogHub
  * Informer
  * Growl
  * Analogger
  * Syslog
  * KNotify
  * XOSD

  ## Keep it simple

  Ramaze's dependencies are kept to a bare minimum.  Many applications will require only
  [Ruby](http://ruby-lang.org) and [Rack](http://rack.rubyforge.org) to run.
  Of course, you can take advantage of several wonderful libraries and
  deployment options (webservers, proxies), but Ramaze is built in a
  lightweight manner to eliminate the unnecessary.

  ## Ruby Implementations

  * [MRI](http://ruby-lang.org) 1.8.x and 1.9.1
  * [JRuby](http://jruby.codehaus.org/) 1.x
  * [Rubinius](http://rubini.us/)

  ## Everything documented

  Classes, Modules, Methods, Configuration...

  Through extensive documentation Ramaze gives the developer easy and solid
  understanding of the underlying concepts and functionality.

  ## Fully BDD

  Ramaze has a very complete set of test specifications written with
  [Bacon](http://github.com/chneukirchen/bacon/tree/master).
  These specs define the way Ramaze has to behave.

  The specs are checked every time a new patch is pushed into the repository,
  ensuring the changes the patch applies don\'t break the framework.
